<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="27" errors="0" failures="3" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2020-08-06" time="13:23:54">
  <environment user="ebekker" cwd="C:\local\prj\bek\pwsh-github-action-tools" os-version="10.0.18363" user-domain="EZSHIELD" machine-name="EZS-001388" nunit-version="2.5.8.0" clr-version="Unknown" platform="Microsoft Windows 10 Pro|C:\WINDOWS|\Device\Harddisk0\Partition3" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="1.1374" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1" executed="True" result="Failure" success="False" time="1.1374" asserts="0" description="C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Set-ActionVariable" executed="True" result="Failure" success="False" time="0.2653" asserts="0" description="Set-ActionVariable">
            <results>
              <test-suite type="ParameterizedTest" name="Set-ActionVariable.Given valid -Name and -Value, and -SkipLocal" executed="True" result="Failure" success="False" time="0.1625" asserts="0" description="Given valid -Name and -Value, and -SkipLocal">
                <results>
                  <test-case description="Given valid -Name and -Value, and -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and -SkipLocal(&quot;varValue1&quot;,&quot;varName1&quot;)" time="0.1167" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, but got varValue1.
at [System.Environment]::GetEnvironmentVariable($Name) | Should -BeNullOrEmpty, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="Given valid -Name and -Value, and -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and -SkipLocal(&quot;var value 2&quot;,&quot;var name 2&quot;)" time="0.0148" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, but got var value 2.
at [System.Environment]::GetEnvironmentVariable($Name) | Should -BeNullOrEmpty, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="Given valid -Name and -Value, and -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and -SkipLocal(&quot;::set-env name=var%2Cname%3B3::var,value;3&#xD;&#xA;&quot;,&quot;var,value;3&quot;,&quot;var,name;3&quot;)" time="0.031" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected $null or empty, but got var,value;3.
at [System.Environment]::GetEnvironmentVariable($Name) | Should -BeNullOrEmpty, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, C:\local\prj\bek\pwsh-github-action-tools\tests\GitHubActions_tests.ps1:30</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Set-ActionVariable.Given valid -Name and -Value, and NOT -SkipLocal" executed="True" result="Success" success="True" time="0.0234" asserts="0" description="Given valid -Name and -Value, and NOT -SkipLocal">
                <results>
                  <test-case description="Given valid -Name and -Value, and NOT -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and NOT -SkipLocal(&quot;varValue1&quot;,&quot;varName1&quot;)" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name and -Value, and NOT -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and NOT -SkipLocal(&quot;var value 2&quot;,&quot;var name 2&quot;)" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name and -Value, and NOT -SkipLocal" name="Set-ActionVariable.Given valid -Name and -Value, and NOT -SkipLocal(&quot;::set-env name=var%2Cname%3B3::var,value;3&#xD;&#xA;&quot;,&quot;var,value;3&quot;,&quot;var,name;3&quot;)" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Add-ActionSecretMask" executed="True" result="Success" success="True" time="0.3446" asserts="0" description="Add-ActionSecretMask">
            <results>
              <test-case description="Given a valid -Secret" name="Add-ActionSecretMask.Given a valid -Secret" time="0.0133" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Add-ActionPath" executed="True" result="Success" success="True" time="0.4099" asserts="0" description="Add-ActionPath">
            <results>
              <test-case description="Given a valid -Path and -SkipLocal" name="Add-ActionPath.Given a valid -Path and -SkipLocal" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Given a valid -Path and NOT -SkipLocal" name="Add-ActionPath.Given a valid -Path and NOT -SkipLocal" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ActionInput" executed="True" result="Success" success="True" time="0.5198" asserts="0" description="Get-ActionInput">
            <results>
              <test-suite type="ParameterizedTest" name="Get-ActionInput.Given valid -Name" executed="True" result="Success" success="True" time="0.0552" asserts="0" description="Given valid -Name">
                <results>
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;input1&quot;)" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;INPUT1&quot;)" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;Input1&quot;)" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;input2&quot;)" time="0.0093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;INPUT2&quot;)" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given valid -Name" name="Get-ActionInput.Given valid -Name(System.Collections.Hashtable,&quot;Input2&quot;)" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ActionInputs" executed="True" result="Success" success="True" time="0.6092" asserts="0" description="Get-ActionInputs">
            <results>
              <test-case description="Given 2 predefined inputs" name="Get-ActionInputs.Given 2 predefined inputs" time="0.005" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Get-ActionInputs.Given 2 predefined inputs, and a -Name in any case" executed="True" result="Success" success="True" time="0.0322" asserts="0" description="Given 2 predefined inputs, and a -Name in any case">
                <results>
                  <test-case description="Given 2 predefined inputs, and a -Name in any case" name="Get-ActionInputs.Given 2 predefined inputs, and a -Name in any case(System.Collections.Hashtable,&quot;InPut1&quot;)" time="0.0124" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 2 predefined inputs, and a -Name in any case" name="Get-ActionInputs.Given 2 predefined inputs, and a -Name in any case(System.Collections.Hashtable,&quot;InPut2&quot;)" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given 2 predefined inputs, and a -Name in any case" name="Get-ActionInputs.Given 2 predefined inputs, and a -Name in any case(System.Collections.Hashtable,&quot;InPut3&quot;)" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Set-ActionOuput" executed="True" result="Success" success="True" time="0.6641" asserts="0" description="Set-ActionOuput">
            <results>
              <test-case description="Given a valid -Name and -Value" name="Set-ActionOuput.Given a valid -Name and -Value" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Write-ActionDebug" executed="True" result="Success" success="True" time="0.7164" asserts="0" description="Write-ActionDebug">
            <results>
              <test-case description="Given a valid -Message" name="Write-ActionDebug.Given a valid -Message" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Write-ActionError" executed="True" result="Success" success="True" time="0.7831" asserts="0" description="Write-ActionError">
            <results>
              <test-case description="Given a valid -Message" name="Write-ActionError.Given a valid -Message" time="0.005" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Write-ActionWarning" executed="True" result="Success" success="True" time="0.8521" asserts="0" description="Write-ActionWarning">
            <results>
              <test-case description="Given a valid -Message" name="Write-ActionWarning.Given a valid -Message" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Write-ActionInfo" executed="True" result="Success" success="True" time="0.9085" asserts="0" description="Write-ActionInfo">
            <results>
              <test-case description="Given a valid -Message" name="Write-ActionInfo.Given a valid -Message" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Enter-ActionOutputGroup" executed="True" result="Success" success="True" time="0.9625" asserts="0" description="Enter-ActionOutputGroup">
            <results>
              <test-case description="Given a valid -Name" name="Enter-ActionOutputGroup.Given a valid -Name" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Exit-ActionOutputGroup" executed="True" result="Success" success="True" time="1.018" asserts="0" description="Exit-ActionOutputGroup">
            <results>
              <test-case description="Given everything is peachy" name="Exit-ActionOutputGroup.Given everything is peachy" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-ActionWithinOutputGroup" executed="True" result="Success" success="True" time="1.0746" asserts="0" description="Invoke-ActionWithinOutputGroup">
            <results>
              <test-case description="Given a valid -Name and -ScriptBlock" name="Invoke-ActionWithinOutputGroup.Given a valid -Name and -ScriptBlock" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>